/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ipp.estg.pages.chats.channelChat;

import ipp.estg.Client;
import ipp.estg.constants.CommandsFromClient;
import ipp.estg.models.Channel;
import ipp.estg.models.ChannelMessage;
import ipp.estg.pages.chats.channelList.ChannelListPage;
import ipp.estg.pages.main.MainPage;
import ipp.estg.threads.ChannelThread;
import ipp.estg.utils.JsonConverter;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author User
 */
public class ChannelChatPage extends javax.swing.JFrame {

    private Client client;
    private Channel currentChannel;
    private boolean isRunning = true;

    /**
     * Map to store Channel Message and its respective index on the list.
     * Because the selected index of the list and the Channel Message Id might be different
     */
    private final Map<String, ChannelMessage> messageIdToMessageMap = new HashMap<>();

    /**
     * Creates new form ChannelChatPage
     */
    public ChannelChatPage(Client client, Channel channel) {
        this.client = client;
        this.currentChannel = channel;

        initComponents();
        loadChannelsToList();
        startMulticastListener(channel.getPort());
    }

    public void loadChannelsToList() {
        messagesTextArea.setText("");
        messagesTextArea.removeAll();
        messageIdToMessageMap.clear();

        // Get Messages (GET_CHANNEL_MESSAGES «channelId» «userId»)
        String request = CommandsFromClient.GET_CHANNEL_MESSAGES + " " + currentChannel.getId() + " " + client.getLoggedUserId();
        String response = client.sendMessageToServer(request);

        // Parse response
        JsonConverter jsonConverter = new JsonConverter();
        List<ChannelMessage> allMessages = jsonConverter.fromJsonToList(response, ChannelMessage.class);

        int indexOnList = 0;
        for(ChannelMessage msg : allMessages) {
            // add user to Map
            String indexOnListString = Integer.toString(indexOnList);
            messageIdToMessageMap.put(indexOnListString, msg);

            // add user to list (when Id is equal to current user, it says me)
            messagesTextArea.append(
                    (msg.getSenderId() == Integer.parseInt(client.getLoggedUserId()) ? "Me" : String.valueOf(msg.getSenderId())) + ": " + msg.getContent() + "\n"
            );

            indexOnList++;
        }
    }

    private void startMulticastListener(int port) {
        new Thread(new ChannelThread(this, port)).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        sendMessageBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTb = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        messagesTextArea = new javax.swing.JTextArea();
        errorLbl = new javax.swing.JLabel();
        deleteChannelBtn = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        sendMessageBtn.setText("Send");
        sendMessageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(messageTb);

        messagesTextArea.setColumns(20);
        messagesTextArea.setRows(5);
        jScrollPane2.setViewportView(messagesTextArea);
        messagesTextArea.setEnabled(false);

        errorLbl.setForeground(new java.awt.Color(255, 0, 0));
        errorLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        deleteChannelBtn.setText("Delete Channel");
        deleteChannelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteChannelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtn)
                        .addGap(18, 18, 18)
                        .addComponent(errorLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteChannelBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sendMessageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(errorLbl)
                    .addComponent(deleteChannelBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendMessageBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        isRunning = false;
        MainPage mainPage = new MainPage(client);
        mainPage.setVisible(true); // open mainPage
        this.dispose(); // close current page
    }//GEN-LAST:event_backBtnActionPerformed

    private void sendMessageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageBtnActionPerformed
        String message = messageTb.getText();
        if (message.isEmpty()) {
            errorLbl.setText("Message cannot be empty");
            return;
        }

        // Send message (SEND_CHANNEL_MESSAGE «channelId» «senderId» "«message»")
        String request = "SEND_CHANNEL_MESSAGE " + currentChannel.getId() + " " + client.getLoggedUserId() + " \"" + message + "\"";
        String response = client.sendMessageToServer(request);

        if (response.startsWith("ERROR")) {
            errorLbl.setText("Error sending message");
            return;
        }

        // Clear message text box
        messageTb.setText("");
    }//GEN-LAST:event_sendMessageBtnActionPerformed

    private void deleteChannelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteChannelBtnActionPerformed
        // Send request (DELETE_CHANNEL «userID» «channelId»)
        String request = CommandsFromClient.DELETE_CHANNEL + " " + client.getLoggedUserId() + " " + currentChannel.getId();
        String response = client.sendMessageToServer(request);

        if (response.startsWith("ERROR:")) {
            errorLbl.setText("Error deleting channel");
            return;
        }

        isRunning = false;

        ChannelListPage channelListPage = new ChannelListPage(client);
        channelListPage.setVisible(true); // open mainPage
        this.dispose(); // close current page
    }//GEN-LAST:event_deleteChannelBtnActionPerformed

    public boolean isRunning() {
        return isRunning;
    }

    public void addMessageToList(ChannelMessage message) {
        // add user to Map
        String indexOnListString = Integer.toString(messageIdToMessageMap.size());
        messageIdToMessageMap.put(indexOnListString, message);

        // add user to list (when Id is equal to current user, it says me)
        messagesTextArea.append(
                (message.getSenderId() == Integer.parseInt(client.getLoggedUserId()) ? "Me" : String.valueOf(message.getSenderId())) + ": " + message.getContent() + "\n"
        );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton deleteChannelBtn;
    private javax.swing.JLabel errorLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane messageTb;
    private javax.swing.JTextArea messagesTextArea;
    private javax.swing.JButton sendMessageBtn;
    // End of variables declaration//GEN-END:variables
}
