/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ipp.estg.pages.main;

import ipp.estg.Client;
import ipp.estg.constants.CommandsFromClient;
import ipp.estg.models.UserTypes;
import ipp.estg.pages.activatingEmergencyCommunicationsApproval.ActivatingEmergencyCommunicationsApprovalPage;
import ipp.estg.pages.chats.channelList.ChannelListPage;
import ipp.estg.pages.chats.messages.UserMessagesListPage;
import ipp.estg.pages.emergencyResourceDistributionApproval.EmergencyResourceDistributionApprovalPage;
import ipp.estg.pages.auth.login.LoginPage;
import ipp.estg.pages.massEvacuationApproval.MassEvacuationApprovalPage;
import ipp.estg.pages.notifications.NotificationListPage;
import ipp.estg.pages.userApproval.UserApprovalPage;

import javax.swing.*;

/**
 * @author User
 */
public class MainPage extends javax.swing.JFrame {


    private final Client client;

    /**
     * Creates new form MainPage
     */
    public MainPage(Client client) {
        this.client = client;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        approveNewUsersBtn = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        logoutBtn = new javax.swing.JButton();
        massEvacuationBtn = new javax.swing.JButton();
        massEvacuationApprovalBtn = new javax.swing.JButton();
        joinChannelBtn = new javax.swing.JButton();
        emergencyDistributionBtn = new javax.swing.JButton();
        emergencyDistributionApprovalBtn = new javax.swing.JButton();
        emergencyCommunicationsBtn1 = new javax.swing.JButton();
        emergencyCommunicationsApprovalBtn1 = new javax.swing.JButton();
        messagesBtn = new javax.swing.JButton();
        notificationsBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        approveNewUsersBtn.setText("Approve New Users");
        approveNewUsersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveNewUsersBtnActionPerformed(evt);
            }
        });

        errorLabel.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(239, 0, 0));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        massEvacuationBtn.setText("Mass Evacuation Operation");
        massEvacuationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                massEvacuationBtnActionPerformed(evt);
            }
        });

        massEvacuationApprovalBtn.setText("Mass Evacuation Approval");
        massEvacuationApprovalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                massEvacuationApprovalBtnActionPerformed(evt);
            }
        });

        joinChannelBtn.setText("Join Channel");
        joinChannelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinChannelBtnActionPerformed(evt);
            }
        });

        emergencyDistributionBtn.setText("Emergency Resource Distribution Operation");
        emergencyDistributionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emergencyDistributionBtnActionPerformed(evt);
            }
        });

        emergencyDistributionApprovalBtn.setText("Emergency Resource Distribution Approval");
        emergencyDistributionApprovalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emergencyDistributionApprovalBtnActionPerformed(evt);
            }
        });

        emergencyCommunicationsBtn1.setText("Activating Emergency Communications");
        emergencyCommunicationsBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emergencyCommunicationsBtn1ActionPerformed(evt);
            }
        });

        emergencyCommunicationsApprovalBtn1.setText("Activating Emergency Communications Approval");
        emergencyCommunicationsApprovalBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emergencyCommunicationsApprovalBtn1ActionPerformed(evt);
            }
        });

        messagesBtn.setText("Messages");
        messagesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagesBtnActionPerformed(evt);
            }
        });

        notificationsBtn.setText("Notifications");
        notificationsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notificationsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(joinChannelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(messagesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(195, 195, 195))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(emergencyDistributionBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emergencyCommunicationsBtn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(massEvacuationBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emergencyCommunicationsApprovalBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(massEvacuationApprovalBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emergencyDistributionApprovalBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(approveNewUsersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(notificationsBtn)
                            .addComponent(logoutBtn))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(logoutBtn)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(massEvacuationBtn)
                    .addComponent(massEvacuationApprovalBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emergencyCommunicationsBtn1)
                    .addComponent(emergencyCommunicationsApprovalBtn1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emergencyDistributionBtn)
                    .addComponent(emergencyDistributionApprovalBtn))
                .addGap(18, 18, 18)
                .addComponent(approveNewUsersBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(joinChannelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(messagesBtn)))
                .addGap(16, 16, 16)
                .addComponent(notificationsBtn)
                .addGap(17, 17, 17))
        );

        if(client.getLoggedUserType().equals(UserTypes.Low) && client.getLoggedUserType().equals(UserTypes.All)) {
            approveNewUsersBtn.setVisible(false);
        }
        if(client.getLoggedUserType().equals(UserTypes.Low) && client.getLoggedUserType().equals(UserTypes.All)) {
            massEvacuationBtn.setVisible(false);
        }
        if(!client.getLoggedUserType().equals(UserTypes.High)) {
            massEvacuationApprovalBtn.setVisible(false);
        }
        if(client.getLoggedUserType().equals(UserTypes.All)) {
            emergencyDistributionApprovalBtn.setVisible(false);
        }
        if(client.getLoggedUserType().equals(UserTypes.All)) {
            emergencyCommunicationsBtn1.setVisible(false);
        }
        if(client.getLoggedUserType().equals(UserTypes.Low) && client.getLoggedUserType().equals(UserTypes.All)) {
            emergencyCommunicationsApprovalBtn1.setVisible(false);
        }

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void approveNewUsersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveNewUsersBtnActionPerformed
        UserApprovalPage userApprovalPage = new UserApprovalPage(client);
        userApprovalPage.setVisible(true); // open UserApprovalPage
        this.setVisible(false); // close current page
    }//GEN-LAST:event_approveNewUsersBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // clear auth variables
        client.setLoggedUserId("");

        // close this window and opens the login window
        LoginPage loginPage = new LoginPage(client);
        loginPage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void massEvacuationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_massEvacuationBtnActionPerformed
        String message = JOptionPane.showInputDialog("Please insert the message to broadcast to all users:");
        if (message == null || message.isEmpty()) {
            errorLabel.setText("Message can't be empty");
            return;
        }

        // Send message to server (MASS_EVACUATION «userId» "«message»")
        String request = CommandsFromClient.MASS_EVACUATION + " " + client.getLoggedUserId() + " " + "\"" + message + "\"";
        String response = client.sendMessageToServer(request);

        if (response.startsWith("ERROR")) {
            errorLabel.setText(response);
            return;
        }

        // Show success message
        if (!client.getLoggedUserType().equals(UserTypes.High)) {
            JOptionPane.showMessageDialog(null, "Message sent successfully\n" +
                    "Please wait for the authorities to confirm the evacuation", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Message sent successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_massEvacuationBtnActionPerformed

    private void massEvacuationApprovalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_massEvacuationApprovalBtnActionPerformed
        MassEvacuationApprovalPage massEvacuationAprrovePage = new MassEvacuationApprovalPage(client);
        massEvacuationAprrovePage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_massEvacuationApprovalBtnActionPerformed

    private void joinChannelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinChannelBtnActionPerformed
        ChannelListPage channelListPage = new ChannelListPage(client);
        channelListPage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_joinChannelBtnActionPerformed

    private void emergencyDistributionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emergencyDistributionBtnActionPerformed
        // TODO add your handling code here:
        String message = JOptionPane.showInputDialog("Please insert the message to broadcast to all users:");
        if (message == null || message.isEmpty()) {
            errorLabel.setText("Message can't be empty");
            return;
        }
        
        // Send message to server (MASS_EVACUATION «userId» "«message»")
        String request = CommandsFromClient.EMERGENCY_RESOURCE_DISTRIBUTION + " " + client.getLoggedUserId() + " " + "\"" + message + "\"";
        String response = client.sendMessageToServer(request);
        
        if (response.startsWith("ERROR")) {
            errorLabel.setText(response);
            return;
        }

        // Show success message
        if (client.getLoggedUserType().equals(UserTypes.All)) {
            JOptionPane.showMessageDialog(null, "Message sent successfully\n" +
                    "Please wait for the authorities to confirm the evacuation", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Message sent successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_emergencyDistributionBtnActionPerformed

    private void emergencyDistributionApprovalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emergencyDistributionApprovalBtnActionPerformed
        // TODO add your handling code here:
        EmergencyResourceDistributionApprovalPage emergencyResourceAprovePage = new EmergencyResourceDistributionApprovalPage(client);
        emergencyResourceAprovePage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_emergencyDistributionApprovalBtnActionPerformed

    private void emergencyCommunicationsBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emergencyCommunicationsBtn1ActionPerformed
        // TODO add your handling code here:
        String message = JOptionPane.showInputDialog("Please insert the message to broadcast to all users:");
        if (message == null || message.isEmpty()) {
            errorLabel.setText("Message can't be empty");
            return;
        }

        // Send message to server (ACTIVATING_EMERGENCY_COMMUNICATIONS «userId» "«message»")
        String request = CommandsFromClient.ACTIVATING_EMERGENCY_COMMUNICATIONS + " " + client.getLoggedUserId() + " " + "\"" + message + "\"";
        String response = client.sendMessageToServer(request);

        if (response.startsWith("ERROR")) {
            errorLabel.setText(response);
            return;
        }

        // Show success message
        if (client.getLoggedUserType().equals(UserTypes.All) || client.getLoggedUserType().equals(UserTypes.Low)) {
            JOptionPane.showMessageDialog(null, "Message sent successfully\n" +
                    "Please wait for the authorities to confirm the emergency communication", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Message sent successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_emergencyCommunicationsBtn1ActionPerformed

    private void emergencyCommunicationsApprovalBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emergencyCommunicationsApprovalBtn1ActionPerformed
        ActivatingEmergencyCommunicationsApprovalPage emergencyCommunicationAprrovePage = new ActivatingEmergencyCommunicationsApprovalPage(client);
        emergencyCommunicationAprrovePage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_emergencyCommunicationsApprovalBtn1ActionPerformed

    private void messagesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagesBtnActionPerformed
        UserMessagesListPage userMessagesListPage = new UserMessagesListPage(client);
        userMessagesListPage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_messagesBtnActionPerformed

    private void notificationsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notificationsBtnActionPerformed
        NotificationListPage notificationListPage = new NotificationListPage(client);
        notificationListPage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_notificationsBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveNewUsersBtn;
    private javax.swing.JButton emergencyCommunicationsApprovalBtn1;
    private javax.swing.JButton emergencyCommunicationsBtn1;
    private javax.swing.JButton emergencyDistributionApprovalBtn;
    private javax.swing.JButton emergencyDistributionBtn;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton joinChannelBtn;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JButton massEvacuationApprovalBtn;
    private javax.swing.JButton massEvacuationBtn;
    private javax.swing.JButton messagesBtn;
    private javax.swing.JButton notificationsBtn;
    // End of variables declaration//GEN-END:variables
}
